# Only allow HTTP GET
limit_except GET {
  deny all;
}

# Define content location variable
set $contentlocation "";

# Content negotiation
access_by_lua_block {
  -- Capture the incoming HTTP request's Accept-Language header
  local newlanguage = (ngx.var.http_accept_language or "*")

  -- Attempt to negotiate an appropriate language or use default language
  local chosenlang = ngx.var.cookie_lang
  if chosenlang then newlanguage = chosenlang .. "," .. newlanguage end
  newlanguage = (conneg.accept_language.negotiate(newlanguage,"languages" .. ngx.var.uri) or ngx.var.defaultlang)
  ngx.header.Content_Language = newlanguage

  -- Set content location
  local contentlocation = ngx.var.uri .. "/index@" .. newlanguage .. ".html"
  ngx.header.Content_Location = contentlocation

  -- Serve compressed file if supported and set content location accordingly
  local ae = (ngx.var.http_accept_encoding or "")
  local compression = ae:find("br") and "br" or ae:find("gzip") and "gzip" or nil
  if compression then
    ngx.header.Content_Encoding = compression
    contentlocation = contentlocation .. "." .. compression:sub(1,2)
  end

  -- Set final content location
  ngx.var.contentlocation = contentlocation
}

# MIME type
types { }
default_type "text/html;charset=UTF-8";

# Headers
etag on;
add_header Vary "Accept-Language, Accept-Encoding, Coookie";

try_files $contentlocation @http404;
