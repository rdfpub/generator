daemon off;
worker_processes 2;
pid ./nginx.pid;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;
}

http {
  # Import content negotiation and type definitions
  include conneg.nginx.conf;
  include types.nginx.conf;

  # General HTTP configuration
  root ../resources;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log stdout main;
  error_log  stderr;
  sendfile on;
  sendfile_max_chunk 64k;
  tcp_nopush on;
  server_names_hash_bucket_size 8;

  # Map of resource MIME types to extensions
  map $http_accept $ext {
    default html;
    text/html html;
    text/turtle ttl;
    application/rdf+xml rdf;
    application/xml rdf;
    text/ntriples nt;
    text/plain nt;
    application/ld+json jsonld;
    application/json jsonld;
  }

  # Map of resource file extensions to their canonical MIME types
  map $http_accept $resourcemimetype {
    default $http_accept;
    application/xml application/rdf+xml;
    text/plain text/ntriples;
    application/json application/ld+json;
  }

  # Upstream RDF4J server
  upstream rdf4j {
    server 127.0.0.1:8080;
  }

  # HTTP server
  server {
    listen 80 default_server;
    server_name $SERVER_NAME;

    # Set default language
    set $defaultlang $DEFAULT_LANG;

    # Include all generated locations
    include locations.nginx.conf;

    # Special SPARQL endpoint location
    location @sparql {
      access_by_lua_block {
        -- Attempt to negotiate an acceptable MIME type
        ngx.req.set_header("Accept",conneg.accept.negotiate(ngx.var.http_accept,"query") or "application/sparql-results+json,application/ld+json,*/*")
      }

      proxy_pass http://rdf4j/repositories/rdfpub$is_args$args;

      add_header Vary "Accept";
    }

    # HTTP 404 named location to sink try_files requests that miss (which should never happen, but...)
    location @http404 {
      return 404;
    }

    # Catch-all 404 for all unrecognized URL's
    location / {
      return 404;
    }
  }
}
