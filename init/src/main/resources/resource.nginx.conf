# Only allow HTTP GET
limit_except GET {
  deny all;
}

# Define content location variable
set $contentlocation "";

# Content negotiation
access_by_lua_block {
  -- Capture the incoming HTTP request's Accept header, or provide a default
  local newtype = (ngx.var.http_accept or "*/*")
  local newlanguage = (ngx.var.http_accept_language or "*")

  -- Attempt to negotiate an appropriate MIME type
  newtype = conneg.accept.negotiate(newtype,"resource")

  -- Return HTML if no better type could be negotiated
  ngx.req.set_header("Accept",newtype or "text/html")

  -- Attempt to negotiate an appropriate language or use default language
  local chosenlang = ngx.var.cookie_lang
  if chosenlang then newlanguage = chosenlang .. "," .. newlanguage end
  newlanguage = (conneg.accept_language.negotiate(newlanguage,"languages" .. ngx.var.uri) or ngx.var.defaultlang)
  ngx.header.Content_Language = newlanguage

  -- Begin building content location
  local contentlocation = ""

  -- Generate resource file path
  local ext = ngx.var.ext
  if ext == "html" then
    contentlocation = ngx.var.uri .. "/index@" .. newlanguage .. ".html"
  else
    contentlocation = ngx.var.uri .. "/data." .. ext
  end
  ngx.header.Content_Location = contentlocation

  -- Serve compressed file if supported and set content location accordingly
  local ae = (ngx.var.http_accept_encoding or "")
  local compression = ae:find("br") and "br" or ae:find("gzip") and "gzip" or nil
  if compression then
    ngx.header.Content_Encoding = compression
    contentlocation = contentlocation .. "." .. compression:sub(1,2)
  end

  -- Set final content location
  ngx.var.contentlocation = contentlocation
}

# MIME type
types { }
default_type "";
add_header Content-Type "$resourcemimetype;charset=UTF-8";

# Headers
etag on;
add_header Vary "Accept, Accept-Language, Accept-Encoding, Coookie";
set $link_value "<$uri/data.jsonld>; rel=alternate; type=application/ld+json, <$uri/data.nt>; rel=alternate; type=text/ntriples, <$uri/data.rdf>; rel=alternate; type=application/rdf+xml, <$uri/data.ttl>; rel=alternate; type=text/turtle";
add_header Link $link_value;

try_files $contentlocation @http404;
